<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hubu.mapper.RecordMapper" >

  <resultMap id="BaseResultMap" type="Record" >
    <id column="record_no" property="recordNo" jdbcType="INTEGER" />
    <result column="machine_no" property="machineNo" jdbcType="VARCHAR" />
    <result column="pile_no" property="pileNo" jdbcType="VARCHAR" />
    <result column="first_weight" property="firstWeight" jdbcType="INTEGER" />
    <result column="second_weight" property="secondWeight" jdbcType="INTEGER" />
    <result column="first_depth" property="firstDepth" jdbcType="REAL" />
    <result column="second_depth" property="secondDepth" jdbcType="REAL" />
    <result column="sum_depth" property="sumDepth" jdbcType="REAL" />
    <result column="collect_data" property="collectData" jdbcType="VARCHAR" />
    <result column="gather_time" property="gatherTime" jdbcType="TIMESTAMP" />
    <result column="begin_time" property="beginTime" jdbcType="TIMESTAMP" />
    <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
  </resultMap>

  <resultMap id="ResultMapWithBLOBs" type="Record" extends="BaseResultMap" >
    <result column="weight_record" property="weightRecord" jdbcType="LONGVARCHAR" />
  </resultMap>

  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
      and isdeleted = 0
    </where>
  </sql>

  <sql id="Base_Column_List" >
    record_no, machine_no, pile_no, first_weight, second_weight, first_depth, second_depth, 
    sum_depth, collect_data, gather_time, begin_time, end_time
  </sql>

  <sql id="Blob_Column_List" >
    weight_record
  </sql>

  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="RecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByExample" resultMap="BaseResultMap" parameterType="RecordExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from record
    where record_no = #{recordNo,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from record
    where record_no = #{recordNo,jdbcType=INTEGER}
  </delete>

  <delete id="deleteByExample" parameterType="RecordExample" >
    delete from record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

  <insert id="insert" parameterType="Record" >
    insert into record (record_no, machine_no, pile_no, 
      first_weight, second_weight, first_depth, 
      second_depth, sum_depth, collect_data, 
      gather_time, begin_time, end_time, 
      weight_record)
    values (#{recordNo,jdbcType=INTEGER}, #{machineNo,jdbcType=VARCHAR}, #{pileNo,jdbcType=VARCHAR}, 
      #{firstWeight,jdbcType=INTEGER}, #{secondWeight,jdbcType=INTEGER}, #{firstDepth,jdbcType=REAL}, 
      #{secondDepth,jdbcType=REAL}, #{sumDepth,jdbcType=REAL}, #{collectData,jdbcType=VARCHAR}, 
      #{gatherTime,jdbcType=TIMESTAMP}, #{beginTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{weightRecord,jdbcType=LONGVARCHAR})
  </insert>

  <insert id="insertSelective" parameterType="Record" >
    insert into record
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="recordNo != null" >
        record_no,
      </if>
      <if test="machineNo != null" >
        machine_no,
      </if>
      <if test="pileNo != null" >
        pile_no,
      </if>
      <if test="firstWeight != null" >
        first_weight,
      </if>
      <if test="secondWeight != null" >
        second_weight,
      </if>
      <if test="firstDepth != null" >
        first_depth,
      </if>
      <if test="secondDepth != null" >
        second_depth,
      </if>
      <if test="sumDepth != null" >
        sum_depth,
      </if>
      <if test="collectData != null" >
        collect_data,
      </if>
      <if test="gatherTime != null" >
        gather_time,
      </if>
      <if test="beginTime != null" >
        begin_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="weightRecord != null" >
        weight_record,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="recordNo != null" >
        #{recordNo,jdbcType=INTEGER},
      </if>
      <if test="machineNo != null" >
        #{machineNo,jdbcType=VARCHAR},
      </if>
      <if test="pileNo != null" >
        #{pileNo,jdbcType=VARCHAR},
      </if>
      <if test="firstWeight != null" >
        #{firstWeight,jdbcType=INTEGER},
      </if>
      <if test="secondWeight != null" >
        #{secondWeight,jdbcType=INTEGER},
      </if>
      <if test="firstDepth != null" >
        #{firstDepth,jdbcType=REAL},
      </if>
      <if test="secondDepth != null" >
        #{secondDepth,jdbcType=REAL},
      </if>
      <if test="sumDepth != null" >
        #{sumDepth,jdbcType=REAL},
      </if>
      <if test="collectData != null" >
        #{collectData,jdbcType=VARCHAR},
      </if>
      <if test="gatherTime != null" >
        #{gatherTime,jdbcType=TIMESTAMP},
      </if>
      <if test="beginTime != null" >
        #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="weightRecord != null" >
        #{weightRecord,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>

  <select id="countByExample" parameterType="RecordExample" resultType="java.lang.Integer" >
    select count(*) from record
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>

  <parameterMap id="analyzeProjectTeamPM" type="java.util.Map">
    <parameter property="projectNo" jdbcType="INTEGER" mode="IN"></parameter>
    <parameter property="teamNo" jdbcType="INTEGER" mode="IN"></parameter>
  </parameterMap>

  <resultMap id="ProjectTeamFinishedCompletionResultMap" type="ProjectTeamFinishedCompletion" >
    <result column="project_no" property="projectNo" jdbcType="INTEGER" />
    <result column="team_no" property="teamNo" jdbcType="INTEGER" />
    <result column="project_name" property="projectName" jdbcType="VARCHAR" />
    <result column="team_name" property="teamName" jdbcType="VARCHAR" />
    <result column="team_plan_stakes" property="teamPlanStakes" jdbcType="INTEGER" />
    <result column="team_plan_meters" property="teamPlanMeters" jdbcType="FLOAT" />
    <result column="finished_stakes" property="finishedStakes" jdbcType="INTEGER" />
    <result column="finished_meters" property="finishedMeters" jdbcType="FLOAT" />
    <result column="totalWeight" property="totalWeight" jdbcType="INTEGER" />
    <result column="averWeight" property="averWeight" jdbcType="FLOAT" />
    <result column="completion_rate" property="completionRate" jdbcType="VARCHAR" />
    <result column="begin_time" property="beginTime" jdbcType="DATE" />
    <result column="end_time" property="endTime" jdbcType="DATE" />
  </resultMap>

    <select id="analyzeProjectTeamFinishedCompletion" resultMap="ProjectTeamFinishedCompletionResultMap" parameterMap="analyzeProjectTeamPM" statementType="CALLABLE">
    CALL analyzeProjectTeamFinishedCompletion(#{projectNo,mode=IN},#{teamNo,mode=IN});
  </select>


  <resultMap id="ProjectFinishedCompletionResultMap" type="ProjectFinishedCompletion" >
    <result column="project_no" property="projectNo" jdbcType="INTEGER" />
    <result column="project_name" property="projectName" jdbcType="VARCHAR" />
    <result column="plan_stakes" property="planStakes" jdbcType="INTEGER" />
    <result column="plan_meters" property="planMeters" jdbcType="FLOAT" />
    <result column="price" property="price" jdbcType="FLOAT" />
    <result column="finished_stakes" property="finishedStakes" jdbcType="INTEGER" />
    <result column="finished_meters" property="finishedMeters" jdbcType="FLOAT" />
    <result column="finished_value" property="finishedValue" jdbcType="VARCHAR" />
    <result column="total_value" property="totalValue" jdbcType="FLOAT" />
    <result column="finished_meters" property="finishedMeters" jdbcType="FLOAT" />
    <result column="completion_rate" property="completionRate" jdbcType="VARCHAR" />
    <result column="begin_time" property="beginTime" jdbcType="DATE" />
    <result column="end_time" property="endTime" jdbcType="DATE" />
  </resultMap>

  <select id="analyzeProjectFinishedCompletion" resultMap="ProjectFinishedCompletionResultMap" parameterType="java.lang.Integer" statementType="CALLABLE">
    CALL analyzeProjectFinishedCompletion(#{projectNo,mode=IN});
  </select>
</mapper>